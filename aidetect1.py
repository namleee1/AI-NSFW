# -*- coding: utf-8 -*-
"""aidetect1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/leenammta/aidetect1.5e85c673-19fb-4a89-ab96-3357b8741284.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250531/auto/storage/goog4_request%26X-Goog-Date%3D20250531T081444Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4696b6b9bb4c805a0b47daabd8b9360772a3411f5e0ec512fe1e7cb1b49db3a4e23869c8e7bd7edd4b937948fe1f66226bb6476098e52b09e45248eb586169386b1cc1091310ca35d0e05c3795c29107d977c63a345d53a96cc71a7dc07d32691554b5889353306fc9f7b299bb21e5e4528be8642cf9cf37d0af8172c32a812abda293f4c59f5148b03f126edba8cb2c0f16e5ffdfd547f2e8911e46f8c1be0ee2870daa504e01adc35fe21f6fb0b97f86cb00296fd4cbf881cd6cf246a748001044f40c9e0217503570eecd62aa191d280c3e9b82fd850510eaaa0b95ee87c36a16967310251c9bfcb2066584d4dd1c1f94fb394561c9b7f4d04d71c46a705e
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

leenammta_nsfwcolab_path = kagglehub.dataset_download('leenammta/nsfwcolab')

print('Data source import complete.')

!pip install tensorflow matplotlib
!pip install cv2
!pip install scikit-learn
!pip install numpy

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.utils.class_weight import compute_class_weight
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
import tensorflow as tf

# ============================
# 1. Tham s·ªë & D·ªØ li·ªáu
# ============================

IMG_SIZE = (224, 224)
BATCH_SIZE = 64
NUM_CLASSES = 3
CLASS_NAMES = ['safe', 'nude', 'sexy']
EPOCHS = 64

train_dir = '/kaggle/input/nsfwcolab/colab/train'
val_dir = '/kaggle/input/nsfwcolab/colab/validation'
test_dir = '/kaggle/input/nsfwcolab/colab/test'

# ============================
# 2. Augmentation
# ============================

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    brightness_range=(0.8, 1.2),
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_test_datagen = ImageDataGenerator(rescale=1./255)

train_gen = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=True
)

val_gen = val_test_datagen.flow_from_directory(
    val_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

test_gen = val_test_datagen.flow_from_directory(
    test_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

# ============================
# 3. Model CNN ƒë∆°n gi·∫£n
# ============================

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(NUM_CLASSES, activation='softmax')
])

model.compile(
    loss='categorical_crossentropy',
    optimizer=Adam(learning_rate=1e-4),
    metrics=['accuracy']
)

model.summary()

# ============================
# 4. Hu·∫•n luy·ªán m√¥ h√¨nh
# ============================

history = model.fit(
    train_gen,
    validation_data=val_gen,
    epochs=EPOCHS
)

# ============================
# 5. ƒê√°nh gi√° & L∆∞u model
# ============================

y_test = test_gen.classes
y_pred_probs = model.predict(test_gen)
y_pred = np.argmax(y_pred_probs, axis=1)

model.save('nsfw_classifier_cnn.keras')

print("üîç Final Evaluation on Test Set:")
print(classification_report(y_test, y_pred, target_names=CLASS_NAMES))

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=CLASS_NAMES)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix on Test Set")
plt.show()